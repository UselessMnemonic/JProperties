//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/nihil/Documents/GitHub/JProperties/JProperties.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JPropertiesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LOGICAL_LINE_BREAK=2, NATURAL_LINE_BREAK=3, ESCAPE=4, SPACE=5, 
		PAIR_SEPERATOR=6, PLAINCHAR=7;
	public const int
		RULE_file = 0, RULE_line = 1, RULE_property = 2, RULE_key = 3, RULE_value = 4;
	public static readonly string[] ruleNames = {
		"file", "line", "property", "key", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LOGICAL_LINE_BREAK", "NATURAL_LINE_BREAK", "ESCAPE", 
		"SPACE", "PAIR_SEPERATOR", "PLAINCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JProperties.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPropertiesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPropertiesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPropertiesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JPropertiesParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NATURAL_LINE_BREAK) | (1L << ESCAPE) | (1L << SPACE) | (1L << PLAINCHAR))) != 0)) {
				{
				{
				State = 10; line();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ITerminalNode NATURAL_LINE_BREAK() { return GetToken(JPropertiesParser.NATURAL_LINE_BREAK, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(JPropertiesParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JPropertiesParser.SPACE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 18; Match(SPACE);
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 24; property();
				State = 25; Match(NATURAL_LINE_BREAK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 27; Match(SPACE);
					}
					}
					State = 32;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 33; Match(NATURAL_LINE_BREAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode PAIR_SEPERATOR() { return GetToken(JPropertiesParser.PAIR_SEPERATOR, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(JPropertiesParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JPropertiesParser.SPACE, i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 4, RULE_property);
		int _la;
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; key();
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 37; Match(SPACE);
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 43; Match(PAIR_SEPERATOR);
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 44; Match(SPACE);
					}
					}
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 50; value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; key();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 53; Match(SPACE);
					}
					}
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 59; Match(PAIR_SEPERATOR);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 60; Match(SPACE);
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode[] PLAINCHAR() { return GetTokens(JPropertiesParser.PLAINCHAR); }
		public ITerminalNode PLAINCHAR(int i) {
			return GetToken(JPropertiesParser.PLAINCHAR, i);
		}
		public ITerminalNode[] ESCAPE() { return GetTokens(JPropertiesParser.ESCAPE); }
		public ITerminalNode ESCAPE(int i) {
			return GetToken(JPropertiesParser.ESCAPE, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(JPropertiesParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JPropertiesParser.SPACE, i);
		}
		public ITerminalNode[] PAIR_SEPERATOR() { return GetTokens(JPropertiesParser.PAIR_SEPERATOR); }
		public ITerminalNode PAIR_SEPERATOR(int i) {
			return GetToken(JPropertiesParser.PAIR_SEPERATOR, i);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 6, RULE_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 71;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLAINCHAR:
					{
					State = 68; Match(PLAINCHAR);
					}
					break;
				case ESCAPE:
					{
					State = 69; Match(ESCAPE);
					State = 70;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPE) | (1L << SPACE) | (1L << PAIR_SEPERATOR) | (1L << PLAINCHAR))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ESCAPE || _la==PLAINCHAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode[] PLAINCHAR() { return GetTokens(JPropertiesParser.PLAINCHAR); }
		public ITerminalNode PLAINCHAR(int i) {
			return GetToken(JPropertiesParser.PLAINCHAR, i);
		}
		public ITerminalNode[] ESCAPE() { return GetTokens(JPropertiesParser.ESCAPE); }
		public ITerminalNode ESCAPE(int i) {
			return GetToken(JPropertiesParser.ESCAPE, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(JPropertiesParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JPropertiesParser.SPACE, i);
		}
		public ITerminalNode[] PAIR_SEPERATOR() { return GetTokens(JPropertiesParser.PAIR_SEPERATOR); }
		public ITerminalNode PAIR_SEPERATOR(int i) {
			return GetToken(JPropertiesParser.PAIR_SEPERATOR, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPropertiesListener typedListener = listener as IJPropertiesListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLAINCHAR:
				{
				State = 75; Match(PLAINCHAR);
				}
				break;
			case ESCAPE:
				{
				State = 76; Match(ESCAPE);
				State = 77;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPE) | (1L << SPACE) | (1L << PAIR_SEPERATOR) | (1L << PLAINCHAR))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPE) | (1L << SPACE) | (1L << PLAINCHAR))) != 0)) {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLAINCHAR:
					{
					State = 80; Match(PLAINCHAR);
					}
					break;
				case SPACE:
					{
					State = 81; Match(SPACE);
					}
					break;
				case ESCAPE:
					{
					State = 82; Match(ESCAPE);
					State = 83;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPE) | (1L << SPACE) | (1L << PAIR_SEPERATOR) | (1L << PLAINCHAR))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '\\', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\a', '\x3', '\x16', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x19', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x1F', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\"', 
		'\v', '\x3', '\x3', '\x3', '\x5', '\x3', '%', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', ')', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		',', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x30', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '\x33', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x39', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '<', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '@', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x43', '\v', '\x4', 
		'\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x6', '\x5', 'J', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'K', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'Q', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'W', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Z', '\v', '\x6', '\x3', '\x6', 
		'\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x3', '\x3', 
		'\x2', '\x6', '\t', '\x2', '\x65', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'I', '\x3', '\x2', '\x2', '\x2', '\n', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x12', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\x2', '\x2', '\x3', 
		'\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\a', '\a', 
		'\x2', '\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', 
		'\x5', '\x6', '\x4', '\x2', '\x1B', '\x1C', '\a', '\x5', '\x2', '\x2', 
		'\x1C', '%', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', '\a', '\a', '\x2', 
		'\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\x3', '\x2', '\x2', '\x2', '!', '#', '\x3', '\x2', '\x2', '\x2', '\"', 
		' ', '\x3', '\x2', '\x2', '\x2', '#', '%', '\a', '\x5', '\x2', '\x2', 
		'$', '\x17', '\x3', '\x2', '\x2', '\x2', '$', ' ', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', '&', '*', '\x5', '\b', 
		'\x5', '\x2', '\'', ')', '\a', '\a', '\x2', '\x2', '(', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '\x31', '\a', 
		'\b', '\x2', '\x2', '.', '\x30', '\a', '\a', '\x2', '\x2', '/', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\n', '\x6', '\x2', '\x35', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x36', ':', '\x5', '\b', '\x5', '\x2', 
		'\x37', '\x39', '\a', '\a', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', '\x41', 
		'\a', '\b', '\x2', '\x2', '>', '@', '\a', '\a', '\x2', '\x2', '?', '>', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '&', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x45', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'J', '\a', '\t', '\x2', '\x2', 'G', 'H', '\a', '\x6', '\x2', 
		'\x2', 'H', 'J', '\t', '\x2', '\x2', '\x2', 'I', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\t', '\x3', '\x2', '\x2', '\x2', 'M', 'Q', '\a', '\t', 
		'\x2', '\x2', 'N', 'O', '\a', '\x6', '\x2', '\x2', 'O', 'Q', '\t', '\x2', 
		'\x2', '\x2', 'P', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'X', '\x3', '\x2', '\x2', '\x2', 'R', 'W', '\a', '\t', 
		'\x2', '\x2', 'S', 'W', '\a', '\a', '\x2', '\x2', 'T', 'U', '\a', '\x6', 
		'\x2', '\x2', 'U', 'W', '\t', '\x2', '\x2', '\x2', 'V', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', '\x10', '\xF', 
		'\x17', ' ', '$', '*', '\x31', ':', '\x41', '\x44', 'I', 'K', 'P', 'V', 
		'X',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
